package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/common"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
	"github.com/0xPolygon/polygon-edge/validators"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorBLSPublicKeyIndex = getAddressMapping(
		address,
		addressToBLSPublicKeySlot,
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeyIndex   []byte // mapping(address => byte[])
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	addressToBLSPublicKeySlot   = int64(7) // Slot 7
)

const (
	DefaultStakedBalance = "0x0" // 0 ETH
	//nolint: lll
	// old
	// StakingSCBytecode = "0x6080604052600436106101185760003560e01c80637a6eea37116100a0578063d94c111b11610064578063d94c111b1461040a578063e387a7ed14610433578063e804fbf61461045e578063f90ecacc14610489578063facd743b146104c657610186565b80637a6eea37146103215780637dceceb81461034c578063af6da36e14610389578063c795c077146103b4578063ca1e7819146103df57610186565b8063373d6132116100e7578063373d6132146102595780633a4b66f1146102845780633c561f041461028e57806351a9ab32146102b9578063714ff425146102f657610186565b806302b751991461018b578063065ae171146101c85780632367f6b5146102055780632def66201461024257610186565b366101865761013c3373ffffffffffffffffffffffffffffffffffffffff16610503565b1561017c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610173906117de565b60405180910390fd5b610184610516565b005b600080fd5b34801561019757600080fd5b506101b260048036038101906101ad91906113d4565b6105ed565b6040516101bf9190611839565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea91906113d4565b610605565b6040516101fc9190611741565b60405180910390f35b34801561021157600080fd5b5061022c600480360381019061022791906113d4565b610625565b6040516102399190611839565b60405180910390f35b34801561024e57600080fd5b5061025761066e565b005b34801561026557600080fd5b5061026e610759565b60405161027b9190611839565b60405180910390f35b61028c610763565b005b34801561029a57600080fd5b506102a36107cc565b6040516102b0919061171f565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db91906113d4565b610972565b6040516102ed919061175c565b60405180910390f35b34801561030257600080fd5b5061030b610a12565b6040516103189190611839565b60405180910390f35b34801561032d57600080fd5b50610336610a1c565b604051610343919061181e565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e91906113d4565b610a2b565b6040516103809190611839565b60405180910390f35b34801561039557600080fd5b5061039e610a43565b6040516103ab9190611839565b60405180910390f35b3480156103c057600080fd5b506103c9610a49565b6040516103d69190611839565b60405180910390f35b3480156103eb57600080fd5b506103f4610a4f565b60405161040191906116fd565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190611401565b610add565b005b34801561043f57600080fd5b50610448610b82565b6040516104559190611839565b60405180910390f35b34801561046a57600080fd5b50610473610b88565b6040516104809190611839565b60405180910390f35b34801561049557600080fd5b506104b060048036038101906104ab919061144a565b610b92565b6040516104bd91906116e2565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e891906113d4565b610bd1565b6040516104fa9190611741565b60405180910390f35b600080823b905060008111915050919050565b3460046000828254610528919061195a565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461057e919061195a565b9250508190555061058e33610c27565b1561059d5761059c33610ca2565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d346040516105e39190611839565b60405180910390a2565b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61068d3373ffffffffffffffffffffffffffffffffffffffff16610503565b156106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c4906117de565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161074f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107469061177e565b60405180910390fd5b610757610df1565b565b6000600454905090565b6107823373ffffffffffffffffffffffffffffffffffffffff16610503565b156107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b9906117de565b60405180910390fd5b6107ca610516565b565b60606000808054905067ffffffffffffffff8111156107ee576107ed611bf2565b5b60405190808252806020026020018201604052801561082157816020015b606081526020019060019003908161080c5790505b50905060005b60008054905081101561096a576007600080838154811061084b5761084a611bc3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546108bb90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546108e790611a8a565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b505050505082828151811061094c5761094b611bc3565b5b6020026020010181905250808061096290611aed565b915050610827565b508091505090565b6007602052806000526040600020600091509050805461099190611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546109bd90611a8a565b8015610a0a5780601f106109df57610100808354040283529160200191610a0a565b820191906000526020600020905b8154815290600101906020018083116109ed57829003601f168201915b505050505081565b6000600554905090565b6aa56fa5b99019a5c800000081565b60026020528060005260406000206000915090505481565b60065481565b60055481565b60606000805480602002602001604051908101604052809291908181526020018280548015610ad357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a89575b5050505050905090565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610b30929190611297565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc82604051610b77919061175c565b60405180910390a250565b60045481565b6000600654905090565b60008181548110610ba257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610c3282610f43565b158015610c9b57506aa56fa5b99019a5c80000006fffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b60065460008054905010610ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce29061179e565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060046000828254610e8c91906119b0565b92505081905550610e9c33610f43565b15610eab57610eaa33610f99565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ef1573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7582604051610f389190611839565b60405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60055460008054905011610fe2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd9906117fe565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f906117be565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000805490506110c091906119b0565b90508082146111ae5760008082815481106110de576110dd611bc3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600084815481106111205761111f611bc3565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080548061125d5761125c611b94565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b8280546112a390611a8a565b90600052602060002090601f0160209004810192826112c5576000855561130c565b82601f106112de57805160ff191683800117855561130c565b8280016001018555821561130c579182015b8281111561130b5782518255916020019190600101906112f0565b5b509050611319919061131d565b5090565b5b8082111561133657600081600090555060010161131e565b5090565b600061134d61134884611879565b611854565b90508281526020810184848401111561136957611368611c26565b5b611374848285611a48565b509392505050565b60008135905061138b81611d5f565b92915050565b600082601f8301126113a6576113a5611c21565b5b81356113b684826020860161133a565b91505092915050565b6000813590506113ce81611d76565b92915050565b6000602082840312156113ea576113e9611c30565b5b60006113f88482850161137c565b91505092915050565b60006020828403121561141757611416611c30565b5b600082013567ffffffffffffffff81111561143557611434611c2b565b5b61144184828501611391565b91505092915050565b6000602082840312156114605761145f611c30565b5b600061146e848285016113bf565b91505092915050565b600061148383836114a3565b60208301905092915050565b600061149b83836115a3565b905092915050565b6114ac816119e4565b82525050565b6114bb816119e4565b82525050565b60006114cc826118ca565b6114d68185611905565b93506114e1836118aa565b8060005b838110156115125781516114f98882611477565b9750611504836118eb565b9250506001810190506114e5565b5085935050505092915050565b600061152a826118d5565b6115348185611916565b935083602082028501611546856118ba565b8060005b858110156115825784840389528151611563858261148f565b945061156e836118f8565b925060208a0199505060018101905061154a565b50829750879550505050505092915050565b61159d816119f6565b82525050565b60006115ae826118e0565b6115b88185611927565b93506115c8818560208601611a57565b6115d181611c35565b840191505092915050565b60006115e7826118e0565b6115f18185611938565b9350611601818560208601611a57565b61160a81611c35565b840191505092915050565b6000611622601d83611949565b915061162d82611c46565b602082019050919050565b6000611645602783611949565b915061165082611c6f565b604082019050919050565b6000611668601283611949565b915061167382611cbe565b602082019050919050565b600061168b601a83611949565b915061169682611ce7565b602082019050919050565b60006116ae604083611949565b91506116b982611d10565b604082019050919050565b6116cd81611a02565b82525050565b6116dc81611a3e565b82525050565b60006020820190506116f760008301846114b2565b92915050565b6000602082019050818103600083015261171781846114c1565b905092915050565b60006020820190508181036000830152611739818461151f565b905092915050565b60006020820190506117566000830184611594565b92915050565b6000602082019050818103600083015261177681846115dc565b905092915050565b6000602082019050818103600083015261179781611615565b9050919050565b600060208201905081810360008301526117b781611638565b9050919050565b600060208201905081810360008301526117d78161165b565b9050919050565b600060208201905081810360008301526117f78161167e565b9050919050565b60006020820190508181036000830152611817816116a1565b9050919050565b600060208201905061183360008301846116c4565b92915050565b600060208201905061184e60008301846116d3565b92915050565b600061185e61186f565b905061186a8282611abc565b919050565b6000604051905090565b600067ffffffffffffffff82111561189457611893611bf2565b5b61189d82611c35565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061196582611a3e565b915061197083611a3e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119a5576119a4611b36565b5b828201905092915050565b60006119bb82611a3e565b91506119c683611a3e565b9250828210156119d9576119d8611b36565b5b828203905092915050565b60006119ef82611a1e565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611a75578082015181840152602081019050611a5a565b83811115611a84576000848401525b50505050565b60006002820490506001821680611aa257607f821691505b60208210811415611ab657611ab5611b65565b5b50919050565b611ac582611c35565b810181811067ffffffffffffffff82111715611ae457611ae3611bf2565b5b80604052505050565b6000611af882611a3e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b2b57611b2a611b36565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b611d68816119e4565b8114611d7357600080fd5b50565b611d7f81611a3e565b8114611d8a57600080fd5b5056fea264697066735822122063d694fcc3ee3ea02e35afc8ab1be7f4fbd9a3c9f0d264e386005d83323814e264736f6c63430008070033"
	// new
	StakingSCBytecode = "0x608060405269152d02c7e14af68000006000806101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503480156200005357600080fd5b506040516200272e3803806200272e833981810160405281019062000079919062000156565b80821115620000bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b69062000224565b60405180910390fd5b816007819055508060088190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000246565b600080fd5b6000819050919050565b62000130816200011b565b81146200013c57600080fd5b50565b600081519050620001508162000125565b92915050565b6000806040838503121562000170576200016f62000116565b5b600062000180858286016200013f565b925050602062000193858286016200013f565b9150509250929050565b600082825260208201905092915050565b7f4d696e2076616c696461746f7273206e756d2063616e206e6f7420626520677260008201527f6561746572207468616e206d6178206e756d206f662076616c696461746f7273602082015250565b60006200020c6040836200019d565b91506200021982620001ae565b604082019050919050565b600060208201905081810360008301526200023f81620001fd565b9050919050565b6124d880620002566000396000f3fe60806040526004361061014f5760003560e01c80637dceceb8116100b6578063e049ffb11161006f578063e049ffb114610488578063e387a7ed146104b1578063e804fbf6146104dc578063f2fde38b14610507578063f90ecacc14610530578063facd743b1461056d5761015e565b80637dceceb8146103765780638da5cb5b146103b3578063af6da36e146103de578063c795c07714610409578063ca1e781914610434578063d94c111b1461045f5761015e565b80633a4b66f1116101085780633a4b66f1146102855780633c561f041461028f57806351a9ab32146102ba57806371469d91146102f7578063714ff425146103205780637a6eea371461034b5761015e565b806302b7519914610163578063065ae171146101a05780632367f6b5146101dd5780632def66201461021a578063373d61321461023157806338c750d61461025c5761015e565b3661015e5761015c6105aa565b005b600080fd5b34801561016f57600080fd5b5061018a60048036038101906101859190611722565b610681565b6040516101979190611768565b60405180910390f35b3480156101ac57600080fd5b506101c760048036038101906101c29190611722565b610699565b6040516101d4919061179e565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190611722565b6106b9565b6040516102119190611768565b60405180910390f35b34801561022657600080fd5b5061022f610702565b005b34801561023d57600080fd5b5061024661078e565b6040516102539190611768565b60405180910390f35b34801561026857600080fd5b50610283600480360381019061027e9190611801565b610798565b005b61028d610876565b005b34801561029b57600080fd5b506102a4610880565b6040516102b19190611980565b60405180910390f35b3480156102c657600080fd5b506102e160048036038101906102dc9190611722565b610a28565b6040516102ee91906119ec565b60405180910390f35b34801561030357600080fd5b5061031e60048036038101906103199190611a3a565b610ac8565b005b34801561032c57600080fd5b50610335610b70565b6040516103429190611768565b60405180910390f35b34801561035757600080fd5b50610360610b7a565b60405161036d9190611a76565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190611722565b610b9a565b6040516103aa9190611768565b60405180910390f35b3480156103bf57600080fd5b506103c8610bb2565b6040516103d59190611aa0565b60405180910390f35b3480156103ea57600080fd5b506103f3610bd8565b6040516104009190611768565b60405180910390f35b34801561041557600080fd5b5061041e610bde565b60405161042b9190611768565b60405180910390f35b34801561044057600080fd5b50610449610be4565b6040516104569190611b79565b60405180910390f35b34801561046b57600080fd5b5061048660048036038101906104819190611cd0565b610c72565b005b34801561049457600080fd5b506104af60048036038101906104aa9190611a3a565b610d10565b005b3480156104bd57600080fd5b506104c6610db8565b6040516104d39190611768565b60405180910390f35b3480156104e857600080fd5b506104f1610dbe565b6040516104fe9190611768565b60405180910390f35b34801561051357600080fd5b5061052e60048036038101906105299190611722565b610dc8565b005b34801561053c57600080fd5b5061055760048036038101906105529190611a3a565b610ed3565b6040516105649190611aa0565b60405180910390f35b34801561057957600080fd5b50610594600480360381019061058f9190611722565b610f12565b6040516105a1919061179e565b60405180910390f35b34600660008282546105bc9190611d48565b9250508190555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106129190611d48565b9250508190555061062233610f68565b156106315761063033610ff4565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d346040516106779190611768565b60405180910390a2565b60056020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b90611dd9565b60405180910390fd5b61078c611144565b565b6000600654905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f90611e6b565b60405180910390fd5b670de0b6b3a76400008161083c9190611e8b565b6000806101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b61087e6105aa565b565b6060600060018054905067ffffffffffffffff8111156108a3576108a2611ba5565b5b6040519080825280602002602001820160405280156108d657816020015b60608152602001906001900390816108c15790505b50905060005b600180549050811015610a2057600960006001838154811061090157610900611ec8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461097190611f26565b80601f016020809104026020016040519081016040528092919081815260200182805461099d90611f26565b80156109ea5780601f106109bf576101008083540402835291602001916109ea565b820191906000526020600020905b8154815290600101906020018083116109cd57829003601f168201915b5050505050828281518110610a0257610a01611ec8565b5b60200260200101819052508080610a1890611f57565b9150506108dc565b508091505090565b60096020528060005260406000206000915090508054610a4790611f26565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7390611f26565b8015610ac05780601f10610a9557610100808354040283529160200191610ac0565b820191906000526020600020905b815481529060010190602001808311610aa357829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4f90611e6b565b60405180910390fd5b6007548111610b6657600080fd5b8060088190555050565b6000600754905090565b60008054906101000a90046fffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60075481565b60606001805480602002602001604051908101604052809291908181526020018280548015610c6857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c1e575b5050505050905090565b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610cbe919061214b565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc82604051610d0591906119ec565b60405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9790611e6b565b60405180910390fd5b6008548110610dae57600080fd5b8060078190555050565b60065481565b6000600854905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f90611e6b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe9061228f565b60405180910390fd5b610ed081611296565b50565b60018181548110610ee357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610f738261135c565b158015610fed575060008054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b6008546001805490501061103d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103490612321565b60405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600180549050600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008282546111df9190612341565b925050819055506111ef3361135c565b156111fe576111fd336113b2565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611244573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161128b9190611768565b60405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600754600180549050116113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f2906123e7565b60405180910390fd5b600180549050600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147890612453565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600180805490506114d89190612341565b90508082146115c7576000600182815481106114f7576114f6611ec8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001848154811061153957611538611ec8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600180548061167657611675612473565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116ef826116c4565b9050919050565b6116ff816116e4565b811461170a57600080fd5b50565b60008135905061171c816116f6565b92915050565b600060208284031215611738576117376116ba565b5b60006117468482850161170d565b91505092915050565b6000819050919050565b6117628161174f565b82525050565b600060208201905061177d6000830184611759565b92915050565b60008115159050919050565b61179881611783565b82525050565b60006020820190506117b3600083018461178f565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6117de816117b9565b81146117e957600080fd5b50565b6000813590506117fb816117d5565b92915050565b600060208284031215611817576118166116ba565b5b6000611825848285016117ec565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611894578082015181840152602081019050611879565b60008484015250505050565b6000601f19601f8301169050919050565b60006118bc8261185a565b6118c68185611865565b93506118d6818560208601611876565b6118df816118a0565b840191505092915050565b60006118f683836118b1565b905092915050565b6000602082019050919050565b60006119168261182e565b6119208185611839565b9350836020820285016119328561184a565b8060005b8581101561196e578484038952815161194f85826118ea565b945061195a836118fe565b925060208a01995050600181019050611936565b50829750879550505050505092915050565b6000602082019050818103600083015261199a818461190b565b905092915050565b600082825260208201905092915050565b60006119be8261185a565b6119c881856119a2565b93506119d8818560208601611876565b6119e1816118a0565b840191505092915050565b60006020820190508181036000830152611a0681846119b3565b905092915050565b611a178161174f565b8114611a2257600080fd5b50565b600081359050611a3481611a0e565b92915050565b600060208284031215611a5057611a4f6116ba565b5b6000611a5e84828501611a25565b91505092915050565b611a70816117b9565b82525050565b6000602082019050611a8b6000830184611a67565b92915050565b611a9a816116e4565b82525050565b6000602082019050611ab56000830184611a91565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611af0816116e4565b82525050565b6000611b028383611ae7565b60208301905092915050565b6000602082019050919050565b6000611b2682611abb565b611b308185611ac6565b9350611b3b83611ad7565b8060005b83811015611b6c578151611b538882611af6565b9750611b5e83611b0e565b925050600181019050611b3f565b5085935050505092915050565b60006020820190508181036000830152611b938184611b1b565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bdd826118a0565b810181811067ffffffffffffffff82111715611bfc57611bfb611ba5565b5b80604052505050565b6000611c0f6116b0565b9050611c1b8282611bd4565b919050565b600067ffffffffffffffff821115611c3b57611c3a611ba5565b5b611c44826118a0565b9050602081019050919050565b82818337600083830152505050565b6000611c73611c6e84611c20565b611c05565b905082815260208101848484011115611c8f57611c8e611ba0565b5b611c9a848285611c51565b509392505050565b600082601f830112611cb757611cb6611b9b565b5b8135611cc7848260208601611c60565b91505092915050565b600060208284031215611ce657611ce56116ba565b5b600082013567ffffffffffffffff811115611d0457611d036116bf565b5b611d1084828501611ca2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d538261174f565b9150611d5e8361174f565b9250828201905080821115611d7657611d75611d19565b5b92915050565b600082825260208201905092915050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6000611dc3601d83611d7c565b9150611dce82611d8d565b602082019050919050565b60006020820190508181036000830152611df281611db6565b9050919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000611e55602583611d7c565b9150611e6082611df9565b604082019050919050565b60006020820190508181036000830152611e8481611e48565b9050919050565b6000611e96826117b9565b9150611ea1836117b9565b9250828202611eaf816117b9565b9150808214611ec157611ec0611d19565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f3e57607f821691505b602082108103611f5157611f50611ef7565b5b50919050565b6000611f628261174f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f9457611f93611d19565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026120017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611fc4565b61200b8683611fc4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061204861204361203e8461174f565b612023565b61174f565b9050919050565b6000819050919050565b6120628361202d565b61207661206e8261204f565b848454611fd1565b825550505050565b600090565b61208b61207e565b612096818484612059565b505050565b5b818110156120ba576120af600082612083565b60018101905061209c565b5050565b601f8211156120ff576120d081611f9f565b6120d984611fb4565b810160208510156120e8578190505b6120fc6120f485611fb4565b83018261209b565b50505b505050565b600082821c905092915050565b600061212260001984600802612104565b1980831691505092915050565b600061213b8383612111565b9150826002028217905092915050565b6121548261185a565b67ffffffffffffffff81111561216d5761216c611ba5565b5b6121778254611f26565b6121828282856120be565b600060209050601f8311600181146121b557600084156121a3578287015190505b6121ad858261212f565b865550612215565b601f1984166121c386611f9f565b60005b828110156121eb578489015182556001820191506020850194506020810190506121c6565b868310156122085784890151612204601f891682612111565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612279602683611d7c565b91506122848261221d565b604082019050919050565b600060208201905081810360008301526122a88161226c565b9050919050565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b600061230b602783611d7c565b9150612316826122af565b604082019050919050565b6000602082019050818103600083015261233a816122fe565b9050919050565b600061234c8261174f565b91506123578361174f565b925082820390508181111561236f5761236e611d19565b5b92915050565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b60006123d1604083611d7c565b91506123dc82612375565b604082019050919050565b60006020820190508181036000830152612400816123c4565b9050919050565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b600061243d601283611d7c565b915061244882612407565b602082019050919050565b6000602082019050818103600083015261246c81612430565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220346cb72e7a4facf256a92be43549ff29d4ee0c1fa98c08dc5bad2b5f008009a564736f6c63430008120033"

)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBLSPublicKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}

			// Set the value for the address -> validator array index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> staked amount mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
				types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
