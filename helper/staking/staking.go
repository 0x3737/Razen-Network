package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/common"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
	"github.com/0xPolygon/polygon-edge/validators"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorBLSPublicKeyIndex = getAddressMapping(
		address,
		addressToBLSPublicKeySlot,
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeyIndex   []byte // mapping(address => byte[])
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	addressToBLSPublicKeySlot   = int64(7) // Slot 7
)

const (
	DefaultStakedBalance = "0x0" // 0 ETH
	//nolint: lll
	StakingSCBytecode = "0x60806040526004361061014f5760003560e01c80637dceceb8116100b6578063e049ffb11161006f578063e049ffb1146104e7578063e387a7ed14610510578063e804fbf61461053b578063f2fde38b14610566578063f90ecacc1461058f578063facd743b146105cc576101bd565b80637dceceb8146103d55780638da5cb5b14610412578063af6da36e1461043d578063c795c07714610468578063ca1e781914610493578063d94c111b146104be576101bd565b80633a4b66f1116101085780633a4b66f1146102e45780633c561f04146102ee57806351a9ab321461031957806371469d9114610356578063714ff4251461037f5780637a6eea37146103aa576101bd565b806302b75199146101c2578063065ae171146101ff5780632367f6b51461023c5780632def662014610279578063373d61321461029057806338c750d6146102bb576101bd565b366101bd576101733373ffffffffffffffffffffffffffffffffffffffff16610609565b156101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa9061184d565b60405180910390fd5b6101bb61062c565b005b600080fd5b3480156101ce57600080fd5b506101e960048036038101906101e491906118df565b610703565b6040516101f69190611925565b60405180910390f35b34801561020b57600080fd5b50610226600480360381019061022191906118df565b61071b565b604051610233919061195b565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e91906118df565b61073b565b6040516102709190611925565b60405180910390f35b34801561028557600080fd5b5061028e610784565b005b34801561029c57600080fd5b506102a561086f565b6040516102b29190611925565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd91906119be565b610879565b005b6102ec610957565b005b3480156102fa57600080fd5b506103036109c0565b6040516103109190611b3d565b60405180910390f35b34801561032557600080fd5b50610340600480360381019061033b91906118df565b610b68565b60405161034d9190611ba9565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190611bf7565b610c08565b005b34801561038b57600080fd5b50610394610cb0565b6040516103a19190611925565b60405180910390f35b3480156103b657600080fd5b506103bf610cba565b6040516103cc9190611c33565b60405180910390f35b3480156103e157600080fd5b506103fc60048036038101906103f791906118df565b610cda565b6040516104099190611925565b60405180910390f35b34801561041e57600080fd5b50610427610cf2565b6040516104349190611c5d565b60405180910390f35b34801561044957600080fd5b50610452610d18565b60405161045f9190611925565b60405180910390f35b34801561047457600080fd5b5061047d610d1e565b60405161048a9190611925565b60405180910390f35b34801561049f57600080fd5b506104a8610d24565b6040516104b59190611d36565b60405180910390f35b3480156104ca57600080fd5b506104e560048036038101906104e09190611e8d565b610db2565b005b3480156104f357600080fd5b5061050e60048036038101906105099190611bf7565b610e50565b005b34801561051c57600080fd5b50610525610ef8565b6040516105329190611925565b60405180910390f35b34801561054757600080fd5b50610550610efe565b60405161055d9190611925565b60405180910390f35b34801561057257600080fd5b5061058d600480360381019061058891906118df565b610f08565b005b34801561059b57600080fd5b506105b660048036038101906105b19190611bf7565b611013565b6040516105c39190611c5d565b60405180910390f35b3480156105d857600080fd5b506105f360048036038101906105ee91906118df565b611052565b604051610600919061195b565b60405180910390f35b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b346006600082825461063e9190611f05565b9250508190555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106949190611f05565b925050819055506106a4336110a8565b156106b3576106b233611134565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d346040516106f99190611925565b60405180910390a2565b60056020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107a33373ffffffffffffffffffffffffffffffffffffffff16610609565b156107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da9061184d565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085c90611f85565b60405180910390fd5b61086d611284565b565b6000600654905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090612017565b60405180910390fd5b670de0b6b3a76400008161091d9190612037565b6000806101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6109763373ffffffffffffffffffffffffffffffffffffffff16610609565b156109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad9061184d565b60405180910390fd5b6109be61062c565b565b6060600060018054905067ffffffffffffffff8111156109e3576109e2611d62565b5b604051908082528060200260200182016040528015610a1657816020015b6060815260200190600190039081610a015790505b50905060005b600180549050811015610b60576009600060018381548110610a4157610a40612074565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610ab1906120d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610add906120d2565b8015610b2a5780601f10610aff57610100808354040283529160200191610b2a565b820191906000526020600020905b815481529060010190602001808311610b0d57829003601f168201915b5050505050828281518110610b4257610b41612074565b5b60200260200101819052508080610b5890612103565b915050610a1c565b508091505090565b60096020528060005260406000206000915090508054610b87906120d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb3906120d2565b8015610c005780601f10610bd557610100808354040283529160200191610c00565b820191906000526020600020905b815481529060010190602001808311610be357829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90612017565b60405180910390fd5b6007548111610ca657600080fd5b8060088190555050565b6000600754905090565b60008054906101000a90046fffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60075481565b60606001805480602002602001604051908101604052809291908181526020018280548015610da857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d5e575b5050505050905090565b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610dfe91906122f7565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc82604051610e459190611ba9565b60405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612017565b60405180910390fd5b6008548110610eee57600080fd5b8060078190555050565b60065481565b6000600854905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8f90612017565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe9061243b565b60405180910390fd5b611010816113d6565b50565b6001818154811061102357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006110b38261149c565b15801561112d575060008054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b6008546001805490501061117d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611174906124cd565b60405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600180549050600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806006600082825461131f91906124ed565b9250508190555061132f3361149c565b1561133e5761133d336114f2565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611384573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75826040516113cb9190611925565b60405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6007546001805490501161153b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153290612593565b60405180910390fd5b600180549050600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b8906125ff565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001808054905061161891906124ed565b90508082146117075760006001828154811061163757611636612074565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001848154811061167957611678612074565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018054806117b6576117b561261f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600082825260208201905092915050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b6000611837601a836117f0565b915061184282611801565b602082019050919050565b600060208201905081810360008301526118668161182a565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118ac82611881565b9050919050565b6118bc816118a1565b81146118c757600080fd5b50565b6000813590506118d9816118b3565b92915050565b6000602082840312156118f5576118f4611877565b5b6000611903848285016118ca565b91505092915050565b6000819050919050565b61191f8161190c565b82525050565b600060208201905061193a6000830184611916565b92915050565b60008115159050919050565b61195581611940565b82525050565b6000602082019050611970600083018461194c565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61199b81611976565b81146119a657600080fd5b50565b6000813590506119b881611992565b92915050565b6000602082840312156119d4576119d3611877565b5b60006119e2848285016119a9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a51578082015181840152602081019050611a36565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a7982611a17565b611a838185611a22565b9350611a93818560208601611a33565b611a9c81611a5d565b840191505092915050565b6000611ab38383611a6e565b905092915050565b6000602082019050919050565b6000611ad3826119eb565b611add81856119f6565b935083602082028501611aef85611a07565b8060005b85811015611b2b5784840389528151611b0c8582611aa7565b9450611b1783611abb565b925060208a01995050600181019050611af3565b50829750879550505050505092915050565b60006020820190508181036000830152611b578184611ac8565b905092915050565b600082825260208201905092915050565b6000611b7b82611a17565b611b858185611b5f565b9350611b95818560208601611a33565b611b9e81611a5d565b840191505092915050565b60006020820190508181036000830152611bc38184611b70565b905092915050565b611bd48161190c565b8114611bdf57600080fd5b50565b600081359050611bf181611bcb565b92915050565b600060208284031215611c0d57611c0c611877565b5b6000611c1b84828501611be2565b91505092915050565b611c2d81611976565b82525050565b6000602082019050611c486000830184611c24565b92915050565b611c57816118a1565b82525050565b6000602082019050611c726000830184611c4e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611cad816118a1565b82525050565b6000611cbf8383611ca4565b60208301905092915050565b6000602082019050919050565b6000611ce382611c78565b611ced8185611c83565b9350611cf883611c94565b8060005b83811015611d29578151611d108882611cb3565b9750611d1b83611ccb565b925050600181019050611cfc565b5085935050505092915050565b60006020820190508181036000830152611d508184611cd8565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9a82611a5d565b810181811067ffffffffffffffff82111715611db957611db8611d62565b5b80604052505050565b6000611dcc61186d565b9050611dd88282611d91565b919050565b600067ffffffffffffffff821115611df857611df7611d62565b5b611e0182611a5d565b9050602081019050919050565b82818337600083830152505050565b6000611e30611e2b84611ddd565b611dc2565b905082815260208101848484011115611e4c57611e4b611d5d565b5b611e57848285611e0e565b509392505050565b600082601f830112611e7457611e73611d58565b5b8135611e84848260208601611e1d565b91505092915050565b600060208284031215611ea357611ea2611877565b5b600082013567ffffffffffffffff811115611ec157611ec061187c565b5b611ecd84828501611e5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f108261190c565b9150611f1b8361190c565b9250828201905080821115611f3357611f32611ed6565b5b92915050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6000611f6f601d836117f0565b9150611f7a82611f39565b602082019050919050565b60006020820190508181036000830152611f9e81611f62565b9050919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b60006120016025836117f0565b915061200c82611fa5565b604082019050919050565b6000602082019050818103600083015261203081611ff4565b9050919050565b600061204282611976565b915061204d83611976565b925082820261205b81611976565b915080821461206d5761206c611ed6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806120ea57607f821691505b6020821081036120fd576120fc6120a3565b5b50919050565b600061210e8261190c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121405761213f611ed6565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026121ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612170565b6121b78683612170565b95508019841693508086168417925050509392505050565b6000819050919050565b60006121f46121ef6121ea8461190c565b6121cf565b61190c565b9050919050565b6000819050919050565b61220e836121d9565b61222261221a826121fb565b84845461217d565b825550505050565b600090565b61223761222a565b612242818484612205565b505050565b5b818110156122665761225b60008261222f565b600181019050612248565b5050565b601f8211156122ab5761227c8161214b565b61228584612160565b81016020851015612294578190505b6122a86122a085612160565b830182612247565b50505b505050565b600082821c905092915050565b60006122ce600019846008026122b0565b1980831691505092915050565b60006122e783836122bd565b9150826002028217905092915050565b61230082611a17565b67ffffffffffffffff81111561231957612318611d62565b5b61232382546120d2565b61232e82828561226a565b600060209050601f831160018114612361576000841561234f578287015190505b61235985826122db565b8655506123c1565b601f19841661236f8661214b565b60005b8281101561239757848901518255600182019150602085019450602081019050612372565b868310156123b457848901516123b0601f8916826122bd565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124256026836117f0565b9150612430826123c9565b604082019050919050565b6000602082019050818103600083015261245481612418565b9050919050565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b60006124b76027836117f0565b91506124c28261245b565b604082019050919050565b600060208201905081810360008301526124e6816124aa565b9050919050565b60006124f88261190c565b91506125038361190c565b925082820390508181111561251b5761251a611ed6565b5b92915050565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b600061257d6040836117f0565b915061258882612521565b604082019050919050565b600060208201905081810360008301526125ac81612570565b9050919050565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b60006125e96012836117f0565b91506125f4826125b3565b602082019050919050565b60006020820190508181036000830152612618816125dc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220367e332bc4c057126933ed94ca962908805e594487a886746613af28e5faa12064736f6c63430008120033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBLSPublicKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}

			// Set the value for the address -> validator array index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> staked amount mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
				types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
